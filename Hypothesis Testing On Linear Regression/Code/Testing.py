# -*- coding: utf-8 -*-
"""Kiểm định

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Jd_VmtZPxCrQ7_l-aX0jToQuxyo3i0t
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import statsmodels.api as sm
from scipy.stats import t
from sklearn.linear_model import LinearRegression

"""Đọc dữ liệu"""

PATH = '/content/drive/MyDrive/TUDTK/SEATTLE TACOMA AIRPORT, WA US.csv'
df = pd.read_csv(PATH)
df = df.drop(['STATION', 'NAME', 'DATE'], axis=1)
df

"""Làm sạch dữ liệu: Loại đi các hàng có tất cả giá trị đều là NaN, sau đó loại đi các cột có ít nhất một giá trị là NaN"""

df = df.dropna(axis = 0, how = 'all')
df = df.dropna(axis = 1, how = 'any')
df

# Trích xuất bảng gồm các thuộc tính không phải là thuộc tính dự đoán (PRCP) làm X_train 
#            bảng gồm các giá trị của thuộc tính dự đoán (PRCP) làm y_train 
df_Xtrain = df.drop('PRCP', axis = 1) 
df_ytrain = df['PRCP'] 

# Lấy danh sách tên các thuộc tính 
features_name = ['CONST'] + list(df_Xtrain.columns)
y_train = np.asarray(df_ytrain, dtype=float)
X_train = sm.add_constant(np.asarray(df_Xtrain, dtype=float))

"""Hàm hồi quy tuyến tính tổng thể: $y = \beta_0 + \beta_1x_1 + \beta_2x_2 + ... + \beta_px_p + e$ \\
Hàm hồi quy tuyến tính mẫu: $\hat{y} = b_0 + b_1x_1 + b_2x_2 + ... + b_px_p$ \\
Đoạn code sau đây để tính hàm hồi quy tuyến tính mẫu bằng công thức Normal Equation

"""

model = LinearRegression(fit_intercept = False)
model.fit(X_train, y_train)

"""Kiểm định t-test với mỗi thuộc tính thứ $i$ với giả thuyết: \\
$H_0: \beta_{i} = 0$ \\
$H_1: \beta_{i} \neq 0$

Tính các giá trị $t_{stat}$ (giá trị thống kê kiểm định) và $p_{value}$ để tiến hành việc kiểm định.
"""

N = len(X_train) # Số bộ 
p = len(X_train[0]) # Số thuộc tính

y_hat = model.predict(X_train) # Tính các giá trị 
RSS = np.linalg.norm(y_train - y_hat) ** 2 # Tính tổng bình phương thặng dư 
sigma_squared_hat = RSS / (N - p) # Ước lượng phương sai của sai số kết quả 

# Tính độ lệch chuẩn
var_beta_hat = np.linalg.inv(X_train.T @ X_train) * sigma_squared_hat 
standard_error = [var_beta_hat[i, i] ** 0.5 for i in range(p)] 

t_stat = np.divide(model.coef_, standard_error) # Tính giá trị thống kê kiểm định 
p_value = (1 - t.cdf(abs(t_stat), N - p)) * 2 # Tính p_value

df_stat = pd.DataFrame({'Feature': features_name, 'Std_Err': standard_error, 'T_stat': t_stat, 'p_value': p_value})
df_stat

"""Với độ tin cậy là 95%, ta thấy: \\
- Các thuộc tính (trừ CONST) nếu có $p_{value} > 0.05$ ta không đủ cơ sở để bác bỏ $H_0$ tức đối với các thuộc tính này đóng góp cho việc dự đoán thuộc tính đầu ra là không đáng kể nên ta sẽ loại bỏ các thuộc tính này rồi tiến hành xây dựng lại công thức hồi quy tuyến tính. 
- Các thuộc tính còn lại (trừ CONST) có $p_{value} \le 0.05$ ta bác bỏ $H_0$ nên các thuộc tính này sẽ được giữ lại để xây dựng lại công thức hồi quy tuyến tính.
"""

features_name = np.asarray(features_name[1:]) # Lấy các thuộc tính trừ CONST
selected_features = features_name[np.where(p_value[1:] <= 0.05)] # Lấy các thuộc tính có p_value <= 0.05 
print(selected_features)